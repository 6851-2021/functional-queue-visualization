{"version":3,"sources":["Input.js","functional.js","StacksView.js","Versions.js","Link.js","Links.js","Node.js","Nodes.js","utils.js","Graph.js","Info.js","App.js","reportWebVitals.js","index.js"],"names":["Search","Input","InputComponent","props","state","value","handleChange","bind","handleEnqueue","handleDequeue","event","this","push","setState","target","pop","className","direction","placeholder","enterButton","size","onChange","onSearch","maxLength","type","danger","onClick","disabled","React","Component","Stack","val","tail","listAllElements","concat","st","Queue","INS","POP","POPrev","POP2","INS2","HEAD","transferOps","q","q_new","moves","newSize","passive","empty","newPOP","normalQueue","new_queue","old_queue","move_type","stacks","newINS","newINS2","head","newTransferOps","newHEAD","endTransfer","startTransfer","newPOPrev","newPOP2","elements","dequeue","console","log","Option","Select","stackNames","stackNamesHTML","StacksView","showExplanation","move","pushStack","popStack","stack1","stack2","onStepModeChange","onSpeedChange","uniqueKey","setStepMode","setSpeed","parseInt","moveNum","numMoves","setMoveNum","inTransferMode","map","name","enter","exit","copy","onlyLast","elements_disp","e","i","isLast","length","affected","isHead","fade_class","color","on_anim_end","style","display","previousSibling","classList","add","onAnimationEnd","ArrowLeftOutlined","backgroundColor","opNum","nameHTML","move_number","StepBackwardOutlined","StepForwardOutlined","speed_select","id","width","stepMode","speed_slider","speed","Versions","cur","versions","ancs","temp","parents","queues","qelems","parent","code","left_classes","includes","right_classes","left_queue","right_queue","spanClass","fakeqelems","slice","qelems_list","join","L1","L2","qelems_elem","version","setVersion","prevLength","element","document","getElementById","parentNode","scrollTop","offsetTop","Link","LinkComponent","data","LinkVertical","stroke","strokeWidth","fill","Links","links","link","Node","node","onMouseOver","onMouseOut","inFocus","toString","height","y","x","strokeOpacity","rx","ry","dy","fontSize","textAnchor","pointerEvents","Nodes","nodes","onNodeClick","hover","onNodeMouseOver","onNodeMouseOut","top","left","getTopLeft","key","title","visible","placement","Graph","origin","sizeWidth","sizeHeight","margin","right","bottom","innerWidth","innerHeight","root","separation","a","b","depth","descendants","forceUpdate","info_functional","info_stacks","info_queues","info_description","Title","Typography","App","updateQueue","newIdx","parentIdx","ops","num_moves","clearInterval","interval","runAuto","updateGraph","hashmap","newNodeObj","children","newNode","hierarchy","curQueue","curOp","enqueue","waittime","setInterval","notificationClose","notificationButtonVisible","openNotificationWithIcon","notification","message","description","duration","onClose","displayVersionView","isLinear","displayLinear","emptyQueue","graphData","d","versionView","op","align","justify","span","offset","shape","icon","InfoOutlined","checked","checkedChildren","unCheckedChildren","defaultChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4823b724.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Space, Input} from 'antd';\nimport './App.css';\nimport \"antd/dist/antd.css\";\n\n const { Search } = Input;\n\nclass InputComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { value: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEnqueue = this.handleEnqueue.bind(this);\n        this.handleDequeue = this.handleDequeue.bind(this);\n    }\n\n\n    handleEnqueue(event) { \n\t    const value = this.state.value;\n        this.props.push(value === '' ? '?' : value);\n        this.setState({value: ''});\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleDequeue () {\n        this.props.pop();\n    }\n\n    render() {\n        return (\n            \n            <div className=\"functions\">\n            <Space direction=\"horizontal\">\n                <Search\n                    placeholder=\"input number to insert\"\n                    enterButton=\"Enqueue\"\n                    size=\"medium\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    onSearch={this.handleEnqueue}\n                    maxLength=\"2\"\n                />\n                <Button type=\"primary\" danger onClick={this.handleDequeue} disabled={this.props.disabled}>Dequeue</Button>\n                \n            </Space>\n            </div>\n        );\n    }\n\n}\n\n\nexport { InputComponent }\n","class Stack {\n\tconstructor(val = null, tail = null, size = 0) {\n\t\tthis.val = val;\n\t\tthis.tail = tail;\n\t\tthis.size = size;\n\t}\n\n\tstatic push(st, val) {\n\t\treturn new Stack(val, st, st.size + 1);\n\t}\n\n\tstatic tail(st) {\n\t\treturn st.tail;\n\t}\n\n\tstatic head(st) {\n\t\treturn st.val;\n\t}\n\n\tstatic size(st) {\n\t\treturn st.size;\n\t}\n\n\tstatic empty(st) {\n\t\treturn st.size === 0;\n\t}\n\n\tlistAllElements() {\n\t\tif (this.val === null) return [];\n\t\telse return this.tail.listAllElements().concat([this.val]);\n\t}\n}\n\nclass Queue {\n\tconstructor(INS, POP, POPrev, POP2, INS2, HEAD, transferOps, size) {\n\t\tthis.INS = INS;\n\t\tthis.POP = POP;\n\t\tthis.POPrev = POPrev;\n\t\tthis.POP2 = POP2;\n\t\tthis.INS2 = INS2;\n\t\tthis.HEAD = HEAD;\n\t\tthis.transferOps = transferOps;\n\t\tthis.size = size;\n\t}\n\n\tstatic normalQueue(INS, POP, size) {\n\t\treturn new Queue(INS, POP, new Stack(), new Stack(), new Stack(), new Stack(), 0, size);\n\t}\n\n\tstatic emptyQueue() {\n\t\treturn new Queue(new Stack(), new Stack(), new Stack(), new Stack(), new Stack(), new Stack(), 0, 0);\n\t}\n\n\tstatic enqueue(q, val, moves = []) {\n\t\tq = Queue.passive(q, moves);\n\t\tlet newSize = q.size + 1;\n\t\tlet q_new;\n\t\tif (q.transferOps === 0) {\n\t\t\tif (Stack.empty(q.INS) && Stack.empty(q.POP)) { // special case: we place first element straight into POP. can we get rid of this?\n\t\t\t\tlet newPOP = Stack.push(q.POP, val); // PUSH\n\t\t\t\tq_new = Queue.normalQueue(q.INS, newPOP, newSize);\n\t\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"PUSH\", stacks: [\"POP\"], val: val });\n\t\t\t\tq = q_new;\n\t\t\t\treturn q;\n\t\t\t}\n\t\t\tlet newINS = Stack.push(q.INS, val); // PUSH\n\t\t\tq_new = Queue.normalQueue(newINS, q.POP, newSize);\n\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"PUSH\", stacks: [\"INS\"], val: val });\n\t\t\tq = q_new;\n\t\t\treturn q;\n\t\t}\n\t\telse {\n\t\t\tlet newINS2 = Stack.push(q.INS2, val); // PUSH\n\t\t\tq_new = new Queue(q.INS, q.POP, q.POPrev, q.POP2, newINS2, q.HEAD, q.transferOps, newSize);\n\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"PUSH\", stacks: [\"INS2\"], val: val });\n\t\t\tq = q_new;\n\t\t\treturn q;\n\t\t}\n\t}\n\n\tstatic dequeue(q, moves = []) {\n\t\tq = Queue.passive(q, moves);\n\t\tlet newSize = q.size - 1;\n\t\tlet q_new;\n\t\tif (q.transferOps === 0) {\n\t\t\tlet newPOP = Stack.tail(q.POP); // POP\n\t\t\tlet val = Stack.head(q.POP);\n\t\t\tq_new = Queue.normalQueue(q.INS, newPOP, newSize);\n\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"POP\", stacks: [\"POP\"], val: val });\n\t\t\tq = q_new;\n\t\t\treturn q;\n\t\t}\n\t\telse {\n\t\t\tlet newTransferOps = q.transferOps - 1;\n\t\t\tlet newHEAD = Stack.tail(q.HEAD); // POP\n\t\t\tlet val = Stack.head(q.HEAD);\n\t\t\tq_new = new Queue(q.INS, q.POP, q.POPrev, q.POP2, q.INS2, newHEAD, newTransferOps, newSize);\n\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"POP\", stacks: [\"HEAD\"], val: val });\n\t\t\tq = q_new;\n\t\t\tif (q.transferOps === 0) q = Queue.endTransfer(q, moves);\n\t\t\treturn q;\n\t\t}\n\t}\n\n\tstatic head(q) {\n\t\tif (q.transferOps === 0) {\n\t\t\treturn Stack.head(q.POP);\n\t\t}\n\t\telse {\n\t\t\treturn Stack.head(q.HEAD);\n\t\t}\n\t}\n\n\tstatic passive(q, moves) {\n\t\tlet q_new;\n\t\tif (q.transferOps === 0 && Stack.size(q.INS) === Stack.size(q.POP) && Stack.size(q.INS) > 0) {\n\t\t\tq = Queue.startTransfer(q, moves);\n\t\t}\n\t\tif (q.transferOps > 0) {\n\t\t\tlet newTransferOps = q.transferOps - 1;\n\t\t\tif (!Stack.empty(q.INS)) { // first n operations\n\t\t\t\tlet newINS = Stack.tail(q.INS);\n\t\t\t\tlet newPOP2 = Stack.push(q.POP2, Stack.head(q.INS)); // FLIP INS onto POP2\n\t\t\t\tq_new = new Queue(newINS, q.POP, q.POPrev, newPOP2, q.INS2, q.HEAD, newTransferOps, q.size);\n\t\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"FLIP\", stacks: [\"INS\", \"POP2\"], val: Stack.head(q_new.POP2) });\n\t\t\t\tq = q_new;\n\t\t\t\tlet newPOP = Stack.tail(q.POP);\n\t\t\t\tlet newPOPrev = Stack.push(q.POPrev, Stack.head(q.POP)); // FLIP POP onto POPrev\n\t\t\t\tq_new = new Queue(q.INS, newPOP, newPOPrev, q.POP2, q.INS2, q.HEAD, newTransferOps, q.size);\n\t\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"FLIP\", stacks: [\"POP\", \"POPrev\"], val: Stack.head(q_new.POPrev) });\n\t\t\t\tq = q_new;\n\t\t\t}\n\t\t\telse { // remaining n - d operations\n\t\t\t\tlet newPOPrev = Stack.tail(q.POPrev);\n\t\t\t\tlet newPOP2 = Stack.push(q.POP2, Stack.head(q.POPrev)); // FLIP POPrev onto POP2\n\t\t\t\tq_new = new Queue(q.INS, q.POP, newPOPrev, newPOP2, q.INS2, q.HEAD, newTransferOps, q.size);\n\t\t\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"FLIP\", stacks: [\"POPrev\", \"POP2\"], val: Stack.head(q_new.POP2) });\n\t\t\t\tq = q_new;\n\t\t\t}\n\t\t\tif (q.transferOps === 0) {\n\t\t\t\tq = Queue.endTransfer(q, moves);\n\t\t\t}\n\t\t}\n\t\treturn q;\n\t}\n\n\tstatic startTransfer(q, moves) {\n\t\tlet newTransferOps = 2 * Stack.size(q.POP);\n\t\tlet newHEAD = q.POP; // ASSIGN HEAD TO POP\n\t\tvar q_new = new Queue(q.INS, q.POP, q.POPrev, q.POP2, q.INS2, newHEAD, newTransferOps, q.size);\n\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"BEGIN TRANSFER\", stacks: [] });\n\t\tq = q_new;\n\t\treturn q;\n\t}\n\n\tstatic endTransfer(q, moves) {\n\t\tlet q_new;\n\t\tlet newINS = q.INS2; // ASSIGN INS to INS2\n\t\tq_new = new Queue(newINS, q.POP, q.POPrev, q.POP2, q.INS2, q.HEAD, q.transferOps, q.size);\n\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"END TRANSFER 1\", stacks: [] });\n\t\tq = q_new;\n\n\t\tlet newPOP = q.POP2; // ASSIGN POP to POP2\n\t\tq_new = new Queue(newINS, newPOP, q.POPrev, q.POP2, q.INS2, q.HEAD, q.transferOps, q.size);\n\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"END TRANSFER 2\", stacks: [] });\n\t\tq = q_new;\n\n\t\tq_new = Queue.normalQueue(newINS, newPOP, q.size);\n\t\tmoves.push({ new_queue: q_new, old_queue: q, move_type: \"END TRANSFER 3\", stacks: [] });\n\t\tq = q_new;\n\t\treturn q;\n\t}\n\n\tstatic size(q) {\n\t\treturn q.size;\n\t}\n\n\tstatic listAllElements(q) {\n\t\tlet elements = [];\n\t\twhile (Queue.size(q) > 0) {\n\t\t\telements.push(Queue.head(q));\n\t\t\tq = Queue.dequeue(q);\n\t\t}\n\t\treturn elements;\n\t}\n\n\tstatic print(q) {\n\t\tconsole.log(\"INS:\", q.INS.listAllElements());\n\t\tconsole.log(\"POP:\", q.POP.listAllElements());\n\t\tconsole.log(\"POPrev:\", q.POPrev.listAllElements());\n\t\tconsole.log(\"POP2:\", q.POP2.listAllElements());\n\t\tconsole.log(\"INS2:\", q.INS2.listAllElements());\n\t\tconsole.log(\"HEAD:\", q.HEAD.listAllElements());\n\t\tconsole.log(\"Transfer Ops:\", q.transferOps);\n\t}\n\n}\n\n\n// queue array thing for each operation:\n// \n// list of queues for each operation, go from one to another with a simple operation, and provide what that simple operation is\n//\n// each actual operation, push and pop, consists of a few simple operations:\n//\n// pop from stack: fade out\n// push from stack: basically what already happens\n// swap two stacks: highlight stacks, e.g. orange and blue box\n// splitting up a big operation into simple ones and doing the simple ones one-by-one: how? user should be able to control speed somehow, in the future maybe helpful messages for each simple operation?\n//\n// miscellaneous visual things:\n// \n// alignment: left-alignment makes most sense because everything is stationary except for new element\n// showing INS, POP, etc. as pointers / highlighted elements instead of labels (maybe?)\n// things shouldn't contradict the \"hidden model\" with all the pointers and elements that ever existed (this is very vague)\n//\n// versions:\n//\n// show parent arrows somehow\n// maybe look for a library that still looks minimalistic\n//\n\nexport { Stack, Queue }\n","import React from 'react';\nimport { ArrowLeftOutlined, StepBackwardOutlined, StepForwardOutlined } from '@ant-design/icons';\nimport './App.css';\nimport { Queue, Stack } from './functional';\nimport { Select } from 'antd';\nimport \"antd/dist/antd.css\";\n\nconst { Option } = Select;\n\nconst stackNames = ['INS', 'POP', 'POPrev', 'INS2', 'POP2', 'HEAD'];\nconst stackNamesHTML = {\n    'INS': (<>INS</>),\n    'POP': (<>POP</>),\n    'POPrev': (<>POP<sub>rev</sub></>),\n    'POP2': (<>POP<sub>2</sub></>),\n    'INS2': (<>INS<sub>2</sub></>),\n    'HEAD': (<>HEAD</>)\n};\nclass StacksView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.onStepModeChange = this.onStepModeChange.bind(this);\n        this.onSpeedChange = this.onSpeedChange.bind(this);\n        this.uniqueKey = 0;\n    }\n\n    showExplanation = () => {\n        const move = this.props.move;\n        switch (move.move_type) {\n            case 'PUSH':\n                let pushStack = move.stacks[0];\n                return (<>Push {move.val} onto <span className=\"stack-name-expl\">{stackNamesHTML[pushStack]}</span></>);\n            case 'POP':\n                let popStack = move.stacks[0];\n                return (<>Pop {move.val} from <span className=\"stack-name-expl\">{stackNamesHTML[popStack]}</span></>);\n            case 'BEGIN TRANSFER':\n                return (<>Enter transfer mode (assign <span className=\"stack-name-expl\">{stackNamesHTML['HEAD']}</span> to <span className=\"stack-name-expl\">{stackNamesHTML['POP']}</span>)</>)\n            case 'FLIP':\n                let stack1 = move.stacks[0];\n                let stack2 = move.stacks[1];\n                return (<>Move {move.val} from <span className=\"stack-name-expl\">{stackNamesHTML[stack1]}</span> to <span className=\"stack-name-expl\">{stackNamesHTML[stack2]}</span></>);\n            case 'END TRANSFER 1':\n                return (<>End transfer mode (Part 1): assign <span className=\"stack-name-expl\">{stackNamesHTML['INS']}</span> to <span className=\"stack-name-expl\">{stackNamesHTML['INS2']}</span></>);\n            case 'END TRANSFER 2':\n                return (<>End transfer mode (Part 2): assign <span className=\"stack-name-expl\">{stackNamesHTML['POP']}</span> to <span className=\"stack-name-expl\">{stackNamesHTML['POP2']}</span></>);\n            case 'END TRANSFER 3':\n                return (<>End transfer mode (Part 3): assign <span className=\"stack-name-expl\">{stackNamesHTML['INS2']}</span>, <span className=\"stack-name-expl\">{stackNamesHTML['POP2']}</span>, <span className=\"stack-name-expl\">{stackNamesHTML['POPrev']}</span>, <span className=\"stack-name-expl\">{stackNamesHTML['HEAD']}</span> to null</>);\n            case 'CREATE':\n                return <>Create queue</>;\n            default:\n                return <></>;\n        }\n    }\n\n    onStepModeChange(value) {\n        this.props.setStepMode(value);\n    }\n\n    onSpeedChange(event) {\n        this.props.setSpeed(parseInt(event.target.value));\n    }\n\n    render() {\n        const move = this.props.move;\n        const move_type = move.move_type;\n        const moveNum = this.props.moveNum;\n        const numMoves = this.props.numMoves;\n        const setMoveNum = this.props.setMoveNum;\n        const inTransferMode = Stack.size(move.new_queue[\"HEAD\"]) > 0;\n        const stacks = stackNames.map(\n            (name) => {\n\n                let enter = (move_type === 'PUSH' && move.stacks[0] === name) || (move_type === 'FLIP' && move.stacks[1] === name) || (move_type === 'BEGIN TRANSFER' && name === 'HEAD') || (move_type === 'END TRANSFER 1' && name === 'INS') || (move_type === 'END TRANSFER 2' && name === 'POP');\n                let exit = (move_type === 'POP' && move.stacks[0] === name) || (move_type === 'FLIP' && move.stacks[0] === name) || (move_type === 'END TRANSFER 3' && (name === 'POPrev' || name === 'HEAD' || name === 'INS2' || name === 'POP2'));\n                let copy = (move_type === 'BEGIN TRANSFER' && name === 'POP') || (move_type === 'END TRANSFER 1' && name === 'INS2') || (move_type === 'END TRANSFER 2' && name === 'POP2');\n                let onlyLast = (move_type === 'PUSH' || move_type === 'POP' || move_type === 'FLIP');\n\n                let s = exit ? move.old_queue[name] : move.new_queue[name];\n\n                const elements = s.listAllElements();\n                const elements_disp = elements.map((e, i) => {\n                    let isLast = (i === elements.length - 1);\n                    let affected = !onlyLast || (onlyLast && isLast);\n                    let isHead = isLast && ((inTransferMode && name === \"HEAD\") || (!inTransferMode && name === \"POP\"));\n\n                    let fade_class = \"\";\n                    let color = \"white\";\n                    let on_anim_end = () => { };\n\n                    if (affected && enter) {\n                        fade_class = \"fade-in\";\n                        color = \"aquamarine\";\n                    } else if (affected && exit) {\n                        fade_class = \"fade-out\";\n                        color = \"indianred\";\n                        on_anim_end = (event) => { \n                            event.target.style.display = \"none\";\n                            if (isHead && Queue.size(move.new_queue[\"HEAD\"]) > 0) event.target.previousSibling.classList.add(\"head-elem\"); // hacky :(\n                        };\n                    } else if (affected && copy) {\n                        color = \"deepskyblue\";\n                    } \n                    return (\n                        <span className={fade_class} onAnimationEnd={on_anim_end} key={this.props.opNum + moveNum + i + name}>\n                            <ArrowLeftOutlined />\n                            <div\n                                className={\"element\" + (isHead ? \" head-elem\" : \"\")}\n                                style={{ backgroundColor: color }}\n                                onAnimationEnd={(event) => {event.target.style.backgroundColor = \"white\";}}\n                            >\n                                {e}\n                            </div>\n                        </span>);\n                });\n                const nameHTML = stackNamesHTML[name];\n                return (\n                    <div className=\"stackDiv\" key={move + \"-\" + name + \"-stack\"}>\n                        <div className=\"element-null\">&bull;</div>\n                        {elements_disp}\n                        <ArrowLeftOutlined /> <span className=\"stack-name\">{nameHTML} </span>\n                    </div>)\n            }\n        );\n        const move_number = (\n            <div>\n                <StepBackwardOutlined onClick={() => setMoveNum(moveNum - 1)} /> {moveNum + 1}/{numMoves} <StepForwardOutlined onClick={() => setMoveNum(moveNum + 1, numMoves)} />\n            </div>\n        );\n        const speed_select = (\n            <div id=\"speed-select-div\">\n                Step mode: <Select onChange={this.onStepModeChange} style={{ width: 120 }} value={this.props.stepMode}>\n                    <Option value=\"manual\">Manual</Option>\n                    <Option value=\"auto\">Automatic</Option>\n                    <Option value=\"end\">Skip to End</Option>\n                </Select>\n            </div>\n        );\n        const speed_slider = (<div>\n            Speed: <input type=\"range\" id=\"speed-range\" value={this.props.speed} onChange={this.onSpeedChange}></input>\n        </div>\n        );\n        return (\n            <div>\n                {move_number}\n                <p className=\"explanation\"><i>{this.showExplanation()}</i></p>\n                <div>\n                    {stacks}\n                </div>\n                <div >\n                    {speed_select}\n                    {this.props.stepMode === \"auto\" && speed_slider}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { StacksView }\n","import React from 'react';\nimport './App.css';\nimport { Queue } from './functional';\n\nclass Versions extends React.Component {\n\n    render() {\n        const cur = this.props.cur;\n        let versions = [];\n        let ancs = [];\n        let temp = this.props.parents[cur];\n        while (temp !== -1) {\n            ancs.push(temp);\n            temp = this.props.parents[temp];\n        }\n\n        for (let i = 0; i < this.props.queues.length; i++) {\n            const q = this.props.queues[i];\n            const qelems = Queue.listAllElements(q);\n            const parent = this.props.parents[i];\n\n            let code;            \n            const left_classes = ( i === cur ? \" current-queue\" : \"\") + (ancs.includes(i) ? \" anc-queue\" : \"\");\n            const right_classes = (ancs.includes(i) || i === cur ? \" anc-queue\" : \"\");\n            const left_queue = <span className={left_classes}>Q<sub>{i}</sub></span>;\n            const right_queue = <span className={right_classes}>Q<sub>{parent}</sub></span>;\n            if (parent === -1) {\n                code = <> {left_queue} = EmptyQueue() </>\n            } else if (Queue.size(this.props.queues[parent]) < Queue.size(q)) {\n                code = <> {left_queue} = Enqueue({right_queue}, {qelems[qelems.length - 1]}) </>\n            } else {\n                code = <> {left_queue} = Dequeue({right_queue}) </>\n            }\n\n            const spanClass = \"version-ref\" + (i === cur || ancs.includes(i)  ? \" current-version\": \"\");\n\n            const fakeqelems = qelems.slice(1, qelems.length);\n            let qelems_list = fakeqelems.join(\", \");\n            if (qelems.length > 6) {\n                const L1 = fakeqelems.slice(0,2);\n                const L2 = fakeqelems.slice(fakeqelems.length - 3, fakeqelems.length);\n                qelems_list = L1.join(\", \") + \", ... , \" + L2.join(\", \");\n            }\n\n            let qelems_elem;\n            if (qelems.length > 0) {\n                qelems_elem = (<>// has elements <b>{qelems[0]}</b>{(qelems.length > 1) ? \", \" : \"\"}{qelems_list}</>)\n            } else {\n                qelems_elem = \"// is empty\";\n            }\n\n            const version =\n                <div key={i} id={\"version_\" + i}>\n                    <code className={spanClass} onClick={() => this.props.setVersion(i)}>\n                        > {code} <span style={{color: \"grey\"}}> {(i === cur || ancs.includes(i)) && qelems_elem}</span>\n                    </code>\n                </div>;\n            versions.push(version);\n        }\n        return (\n            <div id=\"versions-div\">\n                {versions}\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        if (this.props.cur === this.props.queues.length - 1 && this.props.queues.length !== this.prevLength) {\n            const element = document.getElementById(\"version_\" + this.props.cur);\n\t    this.prevLength = this.props.queues.length;\n            element.parentNode.scrollTop = element.offsetTop;\n        }\n    }\n\n}\n\n\nexport { Versions }\n","import React from 'react';\nimport { LinkVertical } from '@vx/shape';\n\nfunction Link({ data, ...props }) {\n  let LinkComponent;\n  LinkComponent = LinkVertical;\n  \n  return (\n    <LinkComponent\n      data={data}\n      stroke=\"#374469\"\n      strokeWidth=\"1\"\n      fill=\"none\"\n      {...props}\n    />\n  )\n}\n\nexport default Link;","import React, { Fragment } from 'react';\nimport Link from './Link';\n\nfunction Links({ links }) {\n  return (\n    <Fragment>\n      {links.map((link, i) => {\n        return (\n          <Link\n            data={link}\n            stroke=\"#374469\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            key={i}\n          />\n        )\n      })}\n    </Fragment>\n  )\n}\n\nexport default Links;","import React, { Fragment } from 'react';\n\nfunction Node({ node, cur, onClick, onMouseOver, onMouseOut }) {\n  const width = 30;\n  const height = 20;\n  const inFocus = node.data.name===cur.toString();\n\n  return (\n    <Fragment>\n      {(\n        <rect\n          height={height}\n          width={width}\n          y={-height / 2}\n          x={-width / 2}\n          fill={inFocus ? 'seagreen' : '#d6dee1'}\n          stroke={\"black\"}\n          strokeWidth={inFocus ? 2 : 1}\n          strokeOpacity={inFocus ? 1 : 0.6}\n          rx={7} \n          ry={7}\n          onClick={onClick}\n          onMouseOver={onMouseOver}\n          onMouseOut={onMouseOut}\n        />\n      )}\n      <text\n        dy={'.33em'}\n        fontSize={10}\n        // fontFamily=\"Arial\"\n        textAnchor={'middle'}\n        style={{ pointerEvents: 'none' }}\n        fill={inFocus? \"white\" : 'black'}\n      >\n        Q<tspan fontSize={8.5} dy={'.15em'}>{node.data.name}</tspan>\n      </text>\n    </Fragment>\n  );\n}\n\nexport default Node;","import React, { Fragment } from 'react';\nimport { Group } from '@vx/group';\nimport { Tooltip } from 'antd';\n\nimport Node from './Node';\nimport { getTopLeft } from './utils';\n\nfunction Nodes({ nodes, cur, onNodeClick, hover, onNodeMouseOver, onNodeMouseOut }) {\n  return (\n    <Fragment>\n      { nodes.map((node, i) => (\n        <Group {...getTopLeft(node)} key={i}>\n          <Tooltip title={\"Q\"+node.data.name} visible={hover===node.data.name?true:false} placement={\"left\"}>\n          <Node\n            node={node}\n            cur = {cur}\n            onClick={() => onNodeClick(node)}\n            onMouseOver={() => onNodeMouseOver(node)}\n            onMouseOut={() => onNodeMouseOut(node)}\n          />\n          </Tooltip>\n        </Group>\n      ))}\n    </Fragment>\n  )\n}\n\nexport default Nodes;","export function getTopLeft(node) {\n  return {\n      top: node.y,\n      left: node.x\n  } \n}","import React from 'react';\nimport './App.css';\n\nimport { Group } from '@vx/group';\nimport { Tree } from '@vx/hierarchy';\n\nimport Links from \"./Links\";\nimport Nodes from \"./Nodes\";\n\nclass Graph extends React.Component {\n\n    state = {\n        hover: \"\",\n    };\n\n    render() {\n        const {\n            width,\n            height,\n            margin = {\n                top: 30,\n                left: 30,\n                right: 30,\n                bottom: 30\n            }\n        } = this.props;\n            \n        const innerWidth = width - margin.left - margin.right;\n        const innerHeight = height - margin.top - margin.bottom;\n\n        let origin;\n        let sizeWidth;\n        let sizeHeight;\n        origin = { x: 0, y: 0 };\n        sizeWidth = innerWidth;\n        sizeHeight = innerHeight;\n        \n        return (\n            <div id=\"graph-div\">\n                <svg width={width} height={height}>\n                    <Tree\n                        top={margin.top}\n                        left={margin.left}\n                        root={this.props.root}\n                        size={[sizeWidth, sizeHeight]}\n                        separation={(a, b) => (a.parent === b.parent ? 1 : 0.5) / a.depth}\n                    >\n                        {({ data }) => (\n                            <Group top={origin.y} left={origin.x}>\n                                <Links links={data.links()} />\n\n                                <Nodes\n                                    nodes={data.descendants()}\n                                    cur={this.props.cur}\n                                    onNodeClick={(node) => {\n                                        this.props.setVersion(node.id);\n                                        this.forceUpdate();\n                                    }}\n                                    hover={this.state.hover}\n                                    onNodeMouseOver={(node) => {\n                                        this.setState({hover:node.data.name});\n                                        this.forceUpdate();\n                                    }}\n                                    onNodeMouseOut={() => {\n                                        this.setState({hover:\"\"});\n                                        this.forceUpdate();\n                                    }}\n                                />\n                            </Group>\n                        )}\n                    </Tree>\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport { Graph }\n","const info_functional = (<>A functional data structure can never be modified. Instead,\nwhen performing an operation, a <i>new copy</i> of the data structure is returned.\nThis implies a property called <i>full persistence</i>: previous versions of the data structure remain accessible\nforever, and we can perform operations on any version we choose.</>);\nconst info_stacks = (<>A functional stack is probably the simplest example of a functional data\n    structure. It consists solely of a pointer to the head of a one-way linked list,\n    which contains the stack’s elements from top to bottom. To push, we add a new\n    element to the one-way linked list, and return the pointer to this new element.\n    To pop, we return a pointer to the second element of the linked list.</>);\nconst info_queues = (<>Functional queues are a natural next step. Ideally, we would like to implement\n                       them with a <i>constant</i> number of changes per enqueue/dequeue. This turns\n                       out to be much harder than for stacks! But there is a solution: using our functional \n                       stacks as a black box, we can simulate each queue operation using a constant number of\n                        operations on a set of six stacks. The primary goal of our visualizer is to show\n                        these operations in action, and how they come together to make a functional queue.</>);\nconst info_description = (<><b>Functional data structures</b><br/>{info_functional}<br/>\n                            <b>A simple example: functional stacks</b><br/>{info_stacks}<br />\n                            <b>What about a functional queue?</b><br/>{info_queues}</>);\n\nexport {info_description}","import React from 'react';\n\nimport { InfoOutlined } from '@ant-design/icons';\nimport { Button, notification, Row, Col, Typography, Switch } from 'antd';\nimport { hierarchy } from 'd3-hierarchy';\n\nimport './App.css';\nimport { InputComponent } from \"./Input\";\nimport { StacksView } from \"./StacksView\";\nimport { Queue } from './functional';\nimport { Versions } from './Versions';\nimport { Graph } from './Graph';\nimport { info_description } from './Info';\n\nconst { Title } = Typography;\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { queues: [Queue.emptyQueue()], parents: [-1], cur: 0, ops: [[{ new_queue: Queue.emptyQueue(), move_type: \"CREATE\", stacks: [] }]],  moveNum: 0, stepMode: \"auto\", speed: 50, notificationButtonVisible: true, displayLinear:true};\n        this.graphData =  {\n            name: \"0\",\n            children: [\n            ]\n        };\n        this.root = hierarchy(this.graphData, d => (this.graphData.children));\n        this.root.id = 0;\n        this.hashmap = {'0':this.root}; // idx: node\n    }\n\n    updateQueue = (q, moves) => {\n        const newIdx = this.state.queues.length;\n        const parentIdx = this.state.cur;\n        \n        const queues = this.state.queues.concat([q]);\n        const ops = this.state.ops.concat([moves]);\n        const parents = this.state.parents.concat([this.state.cur]);\n        const num_moves = moves.length;\n        this.setState({ queues: queues, parents: parents, cur: queues.length - 1, ops: ops, moveNum: (this.state.stepMode === \"end\" ? num_moves - 1: 0)});\n        clearInterval(this.interval);\n        if (this.state.stepMode === \"auto\") this.runAuto();\n\n        this.updateGraph(parentIdx, newIdx);\n    }\n    \n    updateGraph = (parentIdx, newIdx) => {\n        let parentNode = this.hashmap[parentIdx];\n        \n        var newNodeObj = {\n            name: newIdx.toString(),\n            children: []\n        };\n        var newNode = hierarchy(newNodeObj);\n        newNode.depth = parentNode.depth + 1; \n        newNode.height = parentNode.height - 1;\n        newNode.parent = parentNode; \n        newNode.id = newIdx;\n        this.hashmap[newIdx] = newNode; \n        if(!parentNode.children){\n            parentNode.children = [];\n            parentNode.data.children = [];\n        }\n        parentNode.children.push(newNode);\n        parentNode.data.children.push(newNode.data);\n    }\n\n    curQueue = () => {\n        return this.state.queues[this.state.cur];\n    }\n\n    curOp = () => {\n        return this.state.ops[this.state.cur];\n    }\n\n    enqueue = (val) => {\n        const moves = [];\n        const q = Queue.enqueue(this.curQueue(), val, moves);\n        this.updateQueue(q, moves);\n    };\n\n    dequeue = () => {\n        const moves = [];\n        const q = Queue.dequeue(this.curQueue(), moves);\n        this.updateQueue(q, moves);\n    };\n\n    setVersion = (i) => {\n        this.setState({cur: i, moveNum: 0});\n        clearInterval(this.interval);\n        if (this.state.stepMode === \"auto\") this.runAuto();\n    }\n\n    // only should be called for button presses, not internally\n    setMoveNum = (i) => {\n        if (i >= 0 && i < this.curOp().length) {\n        // if (i >= 0 && i < this.curOp().length) {\n            this.setState({moveNum: i});\n            clearInterval(this.interval);\n        }\n    }\n\n    setStepMode = (stepMode) => {\n        this.setState({stepMode: stepMode});\n        \n        const numMoves = this.curOp().length;\n\t    if (stepMode === \"end\") this.setState({moveNum: numMoves - 1});\n        else if (stepMode === \"auto\") {\n            this.runAuto();\n        }\n    }\n\n    setSpeed = (speed) => {\n        this.setState({speed: speed});\n    }\n\n    runAuto = () => {\n        const handleInterval = () => {\n            const numMoves = this.curOp().length;\n            const moveNum = this.state.moveNum;\n            if (moveNum + 1 < numMoves) {\n                this.setState({moveNum: moveNum + 1});\n            }\n            if (moveNum + 2 >= numMoves) {\n                clearInterval(this.interval);\n            }\n        };\n        const speed = this.state.speed;\n        const x = 10 + speed;\n        const waittime = 100000/x;\n        this.interval = setInterval(handleInterval, waittime);\n    }\n\n    notificationClose = () => {\n        this.setState({notificationButtonVisible: true});\n    }\n\n    openNotificationWithIcon = (type) => {\n        this.setState({notificationButtonVisible: false});\n        const key = \"notification\";\n        notification[type]({\n          key,  // only display one notification at a time\n          message: 'Introduction to Functional Queues',\n          description: info_description,\n          duration: 0,  // don't auto-close the notification,\n          onClose: this.notificationClose,\n        });\n    }\n    displayVersionView = (isLinear) => {\n        this.setState({displayLinear: isLinear});\n    }\n\n    render() {\n        // let op = this.curOp();\n        // let moveNum = this.state.moveNum;\n        // let move = op[moveNum];\n\n        const op = this.curOp();\n        const moveNum = this.state.moveNum;\n        const move = op[moveNum];\n        \n        let versionView;\n        if (this.state.displayLinear) {\n            versionView = <Versions queues={this.state.queues} parents={this.state.parents} cur={this.state.cur} setVersion={this.setVersion}></Versions>;\n        } else {\n            versionView = <Graph data={this.graphData} width={600} height={400} setVersion={this.setVersion} queues={this.state.queues} cur={this.state.cur} root={this.root}/>;\n        }\n\n        return (\n            <div className=\"App\">\n                 \n                <Row type=\"flex\" align=\"middle\" justify=\"center\">\n                    <Col span={16} offset={4}><div className=\"title\"><Title>Functional Queue Visualizer</Title></div></Col>\n                    <Col span={4}><Button id=\"notif-button\" onClick={() => this.openNotificationWithIcon('info')} shape=\"circle\" icon={<InfoOutlined />} style={{display:this.state.notificationButtonVisible ? \"\" : \"none\"}}></Button></Col>\n                </Row>\n\n                <InputComponent push={this.enqueue} pop={this.dequeue} disabled={this.curQueue().size === 0}></InputComponent>\n                <h2> Functional Stacks </h2>\n\t\t<div className=\"stacks\">\n                    <div id=\"stacksID\">\n                    <StacksView move={move} moveNum={moveNum} numMoves={op.length} setMoveNum={this.setMoveNum} setStepMode={this.setStepMode} setSpeed={this.setSpeed} stepMode={this.state.stepMode} opNum={this.state.ops.length}></StacksView>\n                    </div>\n                </div>\n                <br/>\n                <div className=\"history\">\n                    <Row type=\"flex\" align=\"middle\" justify=\"center\">\n                        <Col span={4} offset={4}>\n                            <div className=\"title-h2\"><h2> Version History </h2></div>\n                        </Col>\n                        <Col span={4}>\n                            <div className=\"toggleVersions\"> \n                                <Switch onClick={(checked) => this.displayVersionView(checked)} style={{backgroundColor:this.state.displayLinear ? \"#1890ff\" : \"seagreen\"}} checkedChildren=\"linear\" unCheckedChildren=\"graph\" defaultChecked />\n                            </div>\n                        </Col> \n                    </Row>\n                    {versionView}\n                </div>        \n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}